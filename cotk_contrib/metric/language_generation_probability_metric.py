import numpy as np

from cotk.metric import MetricBase

class LanguageGenerationProbabilityRecorder(MetricBase):
	'''A metric-like class for recorder BLEU.

	Arguments:
		dataloader (DataLoader): A dataloader for translating index to sentences.
		sentence_key (str): Original sentences are passed to :func:`forward` by ``data[data_key]``.
			Default: ``sentence``.
		gen_key (str): Sentences generated by model are passed to :func:`forward` by
			``data[gen_key]``. Default: ``gen``.
	'''
	def __init__(self, dataloader, sentence_len_key="sentence_length", sentence_key="sentence", gen_prob_key="gen_pro"):
		super().__init__()
		self.dataloader = dataloader
		self.sentence_key = sentence_key
		self.sentence_len_key = sentence_len_key
		self.gen_prob_key = gen_prob_key
		self.gen_pro_list = []

	def forward(self, data):
		sentence = data[self.sentence_key]
		sentence_len = data[self.sentence_len_key]
		gen_pro = data[self.gen_prob_key]
		if sentence_len.shape[0] != gen_pro.shape[0]:
			raise ValueError("Batch num is not matched.")
		for i in range(gen_pro.shape[0]):
			sent_len = sentence_len[i]
			sent = sentence[i][1:sent_len]
			now_pro = np.exp(-gen_pro[i][list(range(sent_len-1)), sent])
			self.gen_pro_list.append(now_pro)

	def close(self):
		return {"gen_ppl": self.gen_pro_list}
